/* $api.ts was generated by aspida@1.6.3 */
/* eslint-disable */
// prettier-ignore
import type { Methods as Methods0 } from '.'
// prettier-ignore
import type { Methods as Methods1 } from './2/[hogeId@number]'
// prettier-ignore
import type { Methods as Methods2 } from './2/[hogeId@string]/entries.json'
// prettier-ignore
import type { Methods as Methods3 } from './2/[hogeId@string]/test-4'
// prettier-ignore
import type { Methods as Methods4 } from './2/[hogeId@string]/test-4/[fugaId]'
// prettier-ignore
import type { Methods as Methods5 } from './2/[hogeId@string]/test-4/fuga aa'
// prettier-ignore
import type { Methods as Methods6 } from './2/[hogeId]'
// prettier-ignore
import type { Methods as Methods7 } from './3.1'
// prettier-ignore
import type { Methods as Methods8 } from './[articleId].json'
// prettier-ignore
import type { Methods as Methods9 } from './users/[userId@string]'

// prettier-ignore
type BasicHeaders = Record<string, string>

// prettier-ignore
type Params = {
  query?: any
  headers?: any
  body?: any
  init?: RequestInit
}

// prettier-ignore
const headersToObject = (headers: Headers): any =>
  [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {})

// prettier-ignore
const dataToURLString = (data: Record<string, any>) => {
  const searchParams = new URLSearchParams()

  Object.entries(data).forEach(([key, val]) => {
    if (Array.isArray(val)) {
      val.forEach(v => searchParams.append(key, v))
    } else if (val != null) {
      searchParams.append(key, val)
    }
  })

  return searchParams.toString()
}

// prettier-ignore
type Format = 'URLSearchParams'

// prettier-ignore
const URLSEARCHPARAMS = 'URLSearchParams'
// prettier-ignore
const optionToRequest = (method: string, params?: Params, format?: Format): RequestInit => {
  if (!params?.body) return { method, ...params?.init }

  let body
  let headers: BasicHeaders = {}

  switch (format) {
    case URLSEARCHPARAMS:
      body = dataToURLString(params.body)
      headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8'
      break
    default:
      body = JSON.stringify(params.body)
      headers['Content-Type'] = 'application/json;charset=utf-8'
      break
  }

  return {
    method,
    body,
    ...params.init,
    headers: { ...headers, ...params.init?.headers, ...params.headers }
  }
}

// prettier-ignore
type ServerData = { status?: number; headers?: BasicHeaders; body?: any }
// prettier-ignore
type ResType = 'json' | 'text' | 'arrayBuffer' | 'blob' | 'formData' | 'void'

// prettier-ignore
const client: typeof fetch = typeof fetch !== 'undefined' ? fetch : require('node-fetch')
// prettier-ignore
const send = async <
  Success extends ServerData = { status: number; headers: BasicHeaders },
  Failure extends ServerData = { status: number; headers: BasicHeaders }
>(
  method: string,
  baseURL: string,
  url: string,
  resType: ResType,
  errType: ResType,
  params?: Params,
  format?: Format
): Promise<
  | { res: Success; err?: undefined }
  | { res?: undefined; err: { type: 'httpError'; data: Failure } }
  | { res?: undefined; err: { type: 'networkError'; data: TypeError } }
> => {
  try {
    const res = await client(
      `${baseURL}${url}${params?.query ? `?${dataToURLString(params.query)}` : ''}`,
      optionToRequest(method, params, format)
    )

    if (res.ok) {
      return {
        res: {
          status: res.status,
          headers: headersToObject(res.headers),
          body: resType === 'void' ? undefined : await res[resType]()
        } as Success
      }
    } else {
      return {
        err: {
          type: 'httpError',
          data: {
            status: res.status,
            headers: headersToObject(res.headers),
            body: errType === 'void' ? undefined : await res[errType]()
          } as Failure
        }
      }
    }
  } catch (e) {
    return { err: { type: 'networkError', data: e } }
  }
}

// prettier-ignore
const BASE_URL = ''
// prettier-ignore
const PATH0 = '/v1.1/'
// prettier-ignore
const PATH1 = '/v1.1/2/'
// prettier-ignore
const PATH2 = '/'
// prettier-ignore
const PATH3 = '/entries.json/'
// prettier-ignore
const PATH4 = '/test-4/'
// prettier-ignore
const PATH5 = '/test-4/fuga aa/'
// prettier-ignore
const PATH6 = '/v1.1/3.1/'
// prettier-ignore
const PATH7 = '/v1.1/users/'
// prettier-ignore
const GET = 'GET'
// prettier-ignore
const POST = 'POST'
// prettier-ignore
const PUT = 'PUT'
// prettier-ignore
const DELETE = 'DELETE'

// prettier-ignore
export const createApi = (config?: { baseURL?: string; trailingSlash?: boolean; init?: RequestInit }) => {
  const prefix = (config?.baseURL ?? BASE_URL).replace(/\/$/, '')

  return {
    $2: {
      _hogeId_number: (val1: number) => {
        const prefix1 = `${PATH1}${val1}`

        return {
          $get: (option: Methods1['get']['req'] & { init?: RequestInit }) =>
            send<Methods1['get']['res']>(GET, prefix, `${prefix1}${PATH2}`, 'json', 'void', option),
          $path: (option?: { method?: 'get'; query: Methods1['get']['req']['query'] }) =>
            `${prefix}${prefix1}${PATH2}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
        }
      },
      _hogeId_string: (val1: string) => {
        const prefix1 = `${PATH1}${val1}`

        return {
          entries_json: {
            $get: (option?: { init?: RequestInit }) =>
              send<Methods2['get']['res']>(GET, prefix, `${prefix1}${PATH3}`, 'json', 'void', option),
            $path: () => `${prefix}${prefix1}${PATH3}`
          },
          test_4: {
            /**
             * _fugaId comment
             */
            _fugaId: (val3: number | string) => {
              const prefix3 = `${prefix1}${PATH4}${val3}`

              return {
                $get: (option?: Methods4['get']['req'] & { init?: RequestInit }) =>
                  send<Methods4['get']['res']>(GET, prefix, `${prefix3}${PATH2}`, 'json', 'void', option),
                $post: (option: Methods4['post']['req'] & { init?: RequestInit }) =>
                  send<Methods4['post']['res']>(POST, prefix, `${prefix3}${PATH2}`, 'json', 'void', option),
                $put: (option: Methods4['put']['req'] & { init?: RequestInit }) =>
                  send<Methods4['put']['res']>(PUT, prefix, `${prefix3}${PATH2}`, 'json', 'void', option),
                /**
                 * _fugaId delete method
                 * @returns _fugaId resBody
                 */
                $delete: (option: Methods4['delete']['req'] & { init?: RequestInit }) =>
                  send<Methods4['delete']['res']>(DELETE, prefix, `${prefix3}${PATH2}`, 'json', 'void', option),
                $path: (option?: { method?: 'get'; query: Methods4['get']['req']['query'] } | { method: 'post'; query: Methods4['post']['req']['query'] } | { method: 'put'; query: Methods4['put']['req']['query'] } | { method: 'delete'; query: Methods4['delete']['req']['query'] }) =>
                  `${prefix}${prefix3}${PATH2}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
              }
            },
            fuga_aa: {
              $get: (option: Methods5['get']['req'] & { init?: RequestInit }) =>
                send<Methods5['get']['res']>(GET, prefix, `${prefix1}${PATH5}`, 'json', 'void', option),
              $post: (option: Methods5['post']['req'] & { init?: RequestInit }) =>
                send<Methods5['post']['res']>(POST, prefix, `${prefix1}${PATH5}`, 'json', 'void', option),
              $put: (option: Methods5['put']['req'] & { init?: RequestInit }) =>
                send<Methods5['put']['res']>(PUT, prefix, `${prefix1}${PATH5}`, 'json', 'void', option),
              $delete: (option: Methods5['delete']['req'] & { init?: RequestInit }) =>
                send<Methods5['delete']['res']>(DELETE, prefix, `${prefix1}${PATH5}`, 'json', 'void', option),
              $path: (option?: { method?: 'get'; query: Methods5['get']['req']['query'] } | { method: 'post'; query: Methods5['post']['req']['query'] } | { method: 'put'; query: Methods5['put']['req']['query'] } | { method: 'delete'; query: Methods5['delete']['req']['query'] }) =>
                `${prefix}${prefix1}${PATH5}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
            },
            $get: (option: Methods3['get']['req'] & { init?: RequestInit }) =>
              send<{}>(GET, prefix, `${prefix1}${PATH4}`, 'void', 'void', option),
            $post: (option?: Methods3['post']['req'] & { init?: RequestInit }) =>
              send<{}>(POST, prefix, `${prefix1}${PATH4}`, 'void', 'void', option),
            $put: (option?: Methods3['put']['req'] & { init?: RequestInit }) =>
              send<Methods3['put']['res']>(PUT, prefix, `${prefix1}${PATH4}`, 'json', 'void', option),
            $delete: (option: Methods3['delete']['req'] & { init?: RequestInit }) =>
              send<Methods3['delete']['res']>(DELETE, prefix, `${prefix1}${PATH4}`, 'json', 'void', option),
            $path: (option?: { method?: 'get'; query: Methods3['get']['req']['query'] } | { method: 'post'; query: Methods3['post']['req']['query'] } | { method: 'put'; query: Methods3['put']['req']['query'] } | { method: 'delete'; query: Methods3['delete']['req']['query'] }) =>
              `${prefix}${prefix1}${PATH4}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
          }
        }
      },
      _hogeId: (val1: number | string) => {
        const prefix1 = `${PATH1}${val1}`

        return {
          $get: (option?: { init?: RequestInit }) =>
            send<Methods6['get']['res']>(GET, prefix, `${prefix1}${PATH2}`, 'json', 'void', option),
          $path: () => `${prefix}${prefix1}${PATH2}`
        }
      }
    },
    /**
     * 3.1 comment
     */
    $3_1: {
      /**
       * 3.1 get method comment
       * @param option.headers - 3.1 reqHeaders
       */
      $get: (option?: Methods7['get']['req'] & { init?: RequestInit }) =>
        send<Methods7['get']['res']>(GET, prefix, PATH6, 'json', 'void', option),
      $post: (option: Omit<Methods7['post']['req'], 'format'> & { init?: RequestInit }) =>
        send<Methods7['post']['res']>(POST, prefix, PATH6, 'json', 'void', option, URLSEARCHPARAMS),
      $path: (option?: { method?: 'get'; query: Methods7['get']['req']['query'] } | { method: 'post'; query: Methods7['post']['req']['query'] }) =>
        `${prefix}${PATH6}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
    },
    _articleId_json: (val0: number | string) => {
      const prefix0 = `${PATH0}${val0}.json`

      return {
        $get: (option?: { init?: RequestInit }) =>
          send<Methods8['get']['res']>(GET, prefix, `${prefix0}${PATH2}`, 'json', 'void', option),
        $path: () => `${prefix}${prefix0}${PATH2}`
      }
    },
    users: {
      _userId: (val1: string) => {
        const prefix1 = `${PATH7}${val1}`

        return {
          $get: (option: Methods9['get']['req'] & { init?: RequestInit }) =>
            send<Methods9['get']['res']>(GET, prefix, `${prefix1}${PATH2}`, 'json', 'void', option),
          $post: (option: Methods9['post']['req'] & { init?: RequestInit }) =>
            send<Methods9['post']['res']>(POST, prefix, `${prefix1}${PATH2}`, 'json', 'void', option),
          $path: (option?: { method?: 'get'; query: Methods9['get']['req']['query'] } | { method: 'post'; query: Methods9['post']['req']['query'] }) =>
            `${prefix}${prefix1}${PATH2}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
        }
      }
    },
    $get: (option?: Methods0['get']['req'] & { init?: RequestInit }) =>
      send<Methods0['get']['res']>(GET, prefix, PATH0, 'json', 'void', option),
    $path: (option?: { method?: 'get'; query: Methods0['get']['req']['query'] }) =>
      `${prefix}${PATH0}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
  } as const
}
