/* $api.ts was generated by aspida@1.6.3 */
/* eslint-disable */
// prettier-ignore
import type { Methods as Methods0 } from '.'

// prettier-ignore
type BasicHeaders = Record<string, string>

// prettier-ignore
type Params = {
  query?: any
  headers?: any
  body?: any
  init?: RequestInit
}

// prettier-ignore
const headersToObject = (headers: Headers): any =>
  [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {})

// prettier-ignore
const dataToURLString = (data: Record<string, any>) => {
  const searchParams = new URLSearchParams()

  Object.entries(data).forEach(([key, val]) => {
    if (Array.isArray(val)) {
      val.forEach(v => searchParams.append(key, v))
    } else if (val != null) {
      searchParams.append(key, val)
    }
  })

  return searchParams.toString()
}

// prettier-ignore
type Format = 'URLSearchParams'

// prettier-ignore
const URLSEARCHPARAMS = 'URLSearchParams'
// prettier-ignore
const optionToRequest = (method: string, params?: Params, format?: Format): RequestInit => {
  if (!params?.body) return { method, ...params?.init }

  let body
  let headers: BasicHeaders = {}

  switch (format) {
    case URLSEARCHPARAMS:
      body = dataToURLString(params.body)
      headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8'
      break
    default:
      body = JSON.stringify(params.body)
      headers['Content-Type'] = 'application/json;charset=utf-8'
      break
  }

  return {
    method,
    body,
    ...params.init,
    headers: { ...headers, ...params.init?.headers, ...params.headers }
  }
}

// prettier-ignore
type ServerData = { status?: number; headers?: BasicHeaders; body?: any }
// prettier-ignore
type ResType = 'json' | 'text' | 'arrayBuffer' | 'blob' | 'formData' | 'void'

// prettier-ignore
const client: typeof fetch = typeof fetch !== 'undefined' ? fetch : require('node-fetch')
// prettier-ignore
const send = async <
  Success extends ServerData = { status: number; headers: BasicHeaders },
  Failure extends ServerData = { status: number; headers: BasicHeaders }
>(
  method: string,
  baseURL: string,
  url: string,
  resType: ResType,
  errType: ResType,
  params?: Params,
  format?: Format
): Promise<
  | { res: Success; err?: undefined }
  | { res?: undefined; err: { type: 'httpError'; data: Failure } }
  | { res?: undefined; err: { type: 'networkError'; data: TypeError } }
> => {
  try {
    const res = await client(
      `${baseURL}${url}${params?.query ? `?${dataToURLString(params.query)}` : ''}`,
      optionToRequest(method, params, format)
    )

    if (res.ok) {
      return {
        res: {
          status: res.status,
          headers: headersToObject(res.headers),
          body: resType === 'void' ? undefined : await res[resType]()
        } as Success
      }
    } else {
      return {
        err: {
          type: 'httpError',
          data: {
            status: res.status,
            headers: headersToObject(res.headers),
            body: errType === 'void' ? undefined : await res[errType]()
          } as Failure
        }
      }
    }
  } catch (e) {
    return { err: { type: 'networkError', data: e } }
  }
}

// prettier-ignore
const BASE_URL = ''
// prettier-ignore
const PATH0 = '/v1.1/3.1/'
// prettier-ignore
const GET = 'GET'
// prettier-ignore
const POST = 'POST'

/**
 * 3.1 comment
 */
// prettier-ignore
export const createApi = (config?: { baseURL?: string; trailingSlash?: boolean; init?: RequestInit }) => {
  const prefix = (config?.baseURL ?? BASE_URL).replace(/\/$/, '')

  return {
    /**
     * 3.1 get method comment
     * @param option.headers - 3.1 reqHeaders
     */
    $get: (option?: Methods0['get']['req'] & { init?: RequestInit }) =>
      send<Methods0['get']['res']>(GET, prefix, PATH0, 'json', 'void', option),
    $post: (option: Omit<Methods0['post']['req'], 'format'> & { init?: RequestInit }) =>
      send<Methods0['post']['res']>(POST, prefix, PATH0, 'json', 'void', option, URLSEARCHPARAMS),
    $path: (option?: { method?: 'get'; query: Methods0['get']['req']['query'] } | { method: 'post'; query: Methods0['post']['req']['query'] }) =>
      `${prefix}${PATH0}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
  } as const
}
