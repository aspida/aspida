/* $api.ts was generated by aspida@1.6.3 */
/* eslint-disable */
// prettier-ignore
import type { Methods as Methods0 } from '.'
// prettier-ignore
import type { Methods as Methods1 } from './[bar_id@string].json'
// prettier-ignore
import type { Methods as Methods2 } from './[fooId@number]%40create'

// prettier-ignore
type BasicHeaders = Record<string, string>

// prettier-ignore
type Params = {
  query?: any
  headers?: any
  body?: any
  init?: RequestInit
}

// prettier-ignore
const headersToObject = (headers: Headers): any =>
  [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {})

// prettier-ignore
const optionToRequest = (method: string, params?: Params): RequestInit => {
  if (!params?.body) return { method, ...params?.init }

  return {
    method,
    body: JSON.stringify(params.body),
    ...params.init,
    headers: { 'Content-Type': 'application/json;charset=utf-8', ...params.init?.headers, ...params.headers }
  }
}

// prettier-ignore
type ServerData = { status?: number; headers?: BasicHeaders; body?: any }
// prettier-ignore
type ResType = 'json' | 'text' | 'arrayBuffer' | 'blob' | 'formData' | 'void'

// prettier-ignore
const client: typeof fetch = typeof fetch !== 'undefined' ? fetch : require('node-fetch')
// prettier-ignore
const send = async <
  Success extends ServerData = { status: number; headers: BasicHeaders },
  Failure extends ServerData = { status: number; headers: BasicHeaders }
>(
  method: string,
  baseURL: string,
  url: string,
  resType: ResType,
  errType: ResType,
  params?: Params
): Promise<
  | { res: Success; err?: undefined }
  | { res?: undefined; err: { type: 'httpError'; data: Failure } }
  | { res?: undefined; err: { type: 'networkError'; data: TypeError } }
> => {
  try {
    const res = await client(
      `${baseURL}${url}`,
      optionToRequest(method, params)
    )

    if (res.ok) {
      return {
        res: {
          status: res.status,
          headers: headersToObject(res.headers),
          body: resType === 'void' ? undefined : await res[resType]()
        } as Success
      }
    } else {
      return {
        err: {
          type: 'httpError',
          data: {
            status: res.status,
            headers: headersToObject(res.headers),
            body: errType === 'void' ? undefined : await res[errType]()
          } as Failure
        }
      }
    }
  } catch (e) {
    return { err: { type: 'networkError', data: e } }
  }
}

// prettier-ignore
const BASE_URL = ''
// prettier-ignore
const PATH0 = '/foo:bar/'
// prettier-ignore
const PATH1 = '/'
// prettier-ignore
const GET = 'GET'

// prettier-ignore
export const createApi = (config?: { baseURL?: string; trailingSlash?: boolean; init?: RequestInit }) => {
  const prefix = (config?.baseURL ?? BASE_URL).replace(/\/$/, '')

  return {
    _bar_id_json: (val0: string) => {
      const prefix0 = `${PATH0}${val0}.json`

      return {
        $get: (option?: { init?: RequestInit }) =>
          send<Methods1['get']['res']>(GET, prefix, `${prefix0}${PATH1}`, 'text', 'void', option),
        $path: () => `${prefix}${prefix0}${PATH1}`
      }
    },
    _fooId_create: (val0: number) => {
      const prefix0 = `${PATH0}${val0}@create`

      return {
        $get: (option?: { init?: RequestInit }) =>
          send<Methods2['get']['res']>(GET, prefix, `${prefix0}${PATH1}`, 'text', 'void', option),
        $path: () => `${prefix}${prefix0}${PATH1}`
      }
    },
    $get: (option?: { init?: RequestInit }) =>
      send<Methods0['get']['res']>(GET, prefix, PATH0, 'text', 'void', option),
    $path: () => `${prefix}${PATH0}`
  } as const
}
