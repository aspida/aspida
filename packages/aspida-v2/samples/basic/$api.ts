/* $api.ts was generated by aspida@1.6.3 */
/* eslint-disable */
// prettier-ignore
import type { Methods as Methods0 } from '.'
// prettier-ignore
import type { Methods as Methods1 } from './[sampleId@number].json'
// prettier-ignore
import type { Methods as Methods2 } from './foo%3Abar'
// prettier-ignore
import type { Methods as Methods3 } from './foo%3Abar/[bar_id@string].json'
// prettier-ignore
import type { Methods as Methods4 } from './foo%3Abar/[fooId@number]%40create'
// prettier-ignore
import type { Methods as Methods5 } from './v1.1'
// prettier-ignore
import type { Methods as Methods6 } from './v1.1/2/[hogeId@number]'
// prettier-ignore
import type { Methods as Methods7 } from './v1.1/2/[hogeId@string]/entries.json'
// prettier-ignore
import type { Methods as Methods8 } from './v1.1/2/[hogeId@string]/test-4'
// prettier-ignore
import type { Methods as Methods9 } from './v1.1/2/[hogeId@string]/test-4/[fugaId]'
// prettier-ignore
import type { Methods as Methods10 } from './v1.1/2/[hogeId@string]/test-4/fuga aa'
// prettier-ignore
import type { Methods as Methods11 } from './v1.1/2/[hogeId]'
// prettier-ignore
import type { Methods as Methods12 } from './v1.1/3.1'
// prettier-ignore
import type { Methods as Methods13 } from './v1.1/[articleId].json'
// prettier-ignore
import type { Methods as Methods14 } from './v1.1/users/[userId@string]'
// prettier-ignore
import type { Methods as Methods15 } from './v2.0'

// prettier-ignore
type BasicHeaders = Record<string, string>

// prettier-ignore
type Params = {
  query?: any
  headers?: any
  body?: any
  init?: RequestInit
}

// prettier-ignore
const headersToObject = (headers: Headers): any =>
  [...headers.entries()].reduce((prev, [key, val]) => ({ ...prev, [key]: val }), {})

// prettier-ignore
const dataToURLString = (data: Record<string, any>) => {
  const searchParams = new URLSearchParams()

  Object.entries(data).forEach(([key, val]) => {
    if (Array.isArray(val)) {
      val.forEach(v => searchParams.append(key, v))
    } else if (val != null) {
      searchParams.append(key, val)
    }
  })

  return searchParams.toString()
}

// prettier-ignore
type Format = 'URLSearchParams'

// prettier-ignore
const URLSEARCHPARAMS = 'URLSearchParams'
// prettier-ignore
const optionToRequest = (method: string, params?: Params, format?: Format): RequestInit => {
  if (!params?.body) return { method, ...params?.init }

  let body
  let headers: BasicHeaders = {}

  switch (format) {
    case URLSEARCHPARAMS:
      body = dataToURLString(params.body)
      headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8'
      break
    default:
      body = JSON.stringify(params.body)
      headers['Content-Type'] = 'application/json;charset=utf-8'
      break
  }

  return {
    method,
    body,
    ...params.init,
    headers: { ...headers, ...params.init?.headers, ...params.headers }
  }
}

// prettier-ignore
type ServerData = { status?: number; headers?: BasicHeaders; body?: any }
// prettier-ignore
type ResType = 'json' | 'text' | 'arrayBuffer' | 'blob' | 'formData' | 'void'

// prettier-ignore
const client: typeof fetch = typeof fetch !== 'undefined' ? fetch : require('node-fetch')
// prettier-ignore
const send = async <
  Success extends ServerData = { status: number; headers: BasicHeaders },
  Failure extends ServerData = { status: number; headers: BasicHeaders }
>(
  method: string,
  baseURL: string,
  url: string,
  resType: ResType,
  errType: ResType,
  params?: Params,
  format?: Format
): Promise<
  | { res: Success; err?: undefined }
  | { res?: undefined; err: { type: 'httpError'; data: Failure } }
  | { res?: undefined; err: { type: 'networkError'; data: TypeError } }
> => {
  try {
    const res = await client(
      `${baseURL}${url}${params?.query ? `?${dataToURLString(params.query)}` : ''}`,
      optionToRequest(method, params, format)
    )

    if (res.ok) {
      return {
        res: {
          status: res.status,
          headers: headersToObject(res.headers),
          body: resType === 'void' ? undefined : await res[resType]()
        } as Success
      }
    } else {
      return {
        err: {
          type: 'httpError',
          data: {
            status: res.status,
            headers: headersToObject(res.headers),
            body: errType === 'void' ? undefined : await res[errType]()
          } as Failure
        }
      }
    }
  } catch (e) {
    return { err: { type: 'networkError', data: e } }
  }
}

// prettier-ignore
const BASE_URL = 'https://example.com/api/'
// prettier-ignore
const PATH0 = '/foo:bar'
// prettier-ignore
const PATH1 = '/v1.1'
// prettier-ignore
const PATH2 = '/v1.1/2'
// prettier-ignore
const PATH3 = '/entries.json'
// prettier-ignore
const PATH4 = '/test-4'
// prettier-ignore
const PATH5 = '/test-4/fuga aa'
// prettier-ignore
const PATH6 = '/v1.1/3.1'
// prettier-ignore
const PATH7 = '/v1.1/users'
// prettier-ignore
const PATH8 = '/v2.0'
// prettier-ignore
const GET = 'GET'
// prettier-ignore
const POST = 'POST'
// prettier-ignore
const PUT = 'PUT'
// prettier-ignore
const DELETE = 'DELETE'

/**
 * root comment
 *
 * @remarks
 * root remarks comment
 */
// prettier-ignore
export const createApi = (config?: { baseURL?: string; trailingSlash?: boolean; init?: RequestInit }) => {
  const prefix = (config?.baseURL ?? BASE_URL).replace(/\/$/, '')

  return {
    _sampleId_json: (val0: number) => {
      const prefix0 = `/${val0}.json`

      return {
        $get: (option?: { init?: RequestInit }) =>
          send<Methods1['get']['res']>(GET, prefix, prefix0, 'json', 'void', option),
        $path: () => `${prefix}${prefix0}`
      }
    },
    foo_bar: {
      _bar_id_json: (val1: string) => {
        const prefix1 = `${PATH0}/${val1}.json`

        return {
          $get: (option?: { init?: RequestInit }) =>
            send<Methods3['get']['res']>(GET, prefix, prefix1, 'text', 'void', option),
          $path: () => `${prefix}${prefix1}`
        }
      },
      _fooId_create: (val1: number) => {
        const prefix1 = `${PATH0}/${val1}@create`

        return {
          $get: (option?: { init?: RequestInit }) =>
            send<Methods4['get']['res']>(GET, prefix, prefix1, 'text', 'void', option),
          $path: () => `${prefix}${prefix1}`
        }
      },
      $get: (option?: { init?: RequestInit }) =>
        send<Methods2['get']['res']>(GET, prefix, PATH0, 'text', 'void', option),
      $path: () => `${prefix}${PATH0}`
    },
    v1_1: {
      $2: {
        _hogeId_number: (val2: number) => {
          const prefix2 = `${PATH2}/${val2}`

          return {
            $get: (option: Methods6['get']['req'] & { init?: RequestInit }) =>
              send<Methods6['get']['res']>(GET, prefix, prefix2, 'json', 'void', option),
            $path: (option?: { method?: 'get'; query: Methods6['get']['req']['query'] }) =>
              `${prefix}${prefix2}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
          }
        },
        _hogeId_string: (val2: string) => {
          const prefix2 = `${PATH2}/${val2}`

          return {
            entries_json: {
              $get: (option?: { init?: RequestInit }) =>
                send<Methods7['get']['res']>(GET, prefix, `${prefix2}${PATH3}`, 'json', 'void', option),
              $path: () => `${prefix}${prefix2}${PATH3}`
            },
            test_4: {
              /**
               * _fugaId comment
               */
              _fugaId: (val4: number | string) => {
                const prefix4 = `${prefix2}${PATH4}/${val4}`

                return {
                  $get: (option?: Methods9['get']['req'] & { init?: RequestInit }) =>
                    send<Methods9['get']['res']>(GET, prefix, prefix4, 'json', 'void', option),
                  $post: (option: Methods9['post']['req'] & { init?: RequestInit }) =>
                    send<Methods9['post']['res']>(POST, prefix, prefix4, 'json', 'void', option),
                  $put: (option: Methods9['put']['req'] & { init?: RequestInit }) =>
                    send<Methods9['put']['res']>(PUT, prefix, prefix4, 'json', 'void', option),
                  /**
                   * _fugaId delete method
                   */
                  $delete: (option: Methods9['delete']['req'] & { init?: RequestInit }) =>
                    send<{}>(DELETE, prefix, prefix4, 'void', 'void', option),
                  $path: (option?: { method?: 'get'; query: Methods9['get']['req']['query'] } | { method: 'post'; query: Methods9['post']['req']['query'] } | { method: 'put'; query: Methods9['put']['req']['query'] } | { method: 'delete'; query: Methods9['delete']['req']['query'] }) =>
                    `${prefix}${prefix4}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
                }
              },
              fuga_aa: {
                $get: (option: Methods10['get']['req'] & { init?: RequestInit }) =>
                  send<Methods10['get']['res']>(GET, prefix, `${prefix2}${PATH5}`, 'json', 'void', option),
                $post: (option: Methods10['post']['req'] & { init?: RequestInit }) =>
                  send<Methods10['post']['res']>(POST, prefix, `${prefix2}${PATH5}`, 'json', 'void', option),
                $put: (option: Methods10['put']['req'] & { init?: RequestInit }) =>
                  send<Methods10['put']['res']>(PUT, prefix, `${prefix2}${PATH5}`, 'json', 'void', option),
                $delete: (option: Methods10['delete']['req'] & { init?: RequestInit }) =>
                  send<Methods10['delete']['res']>(DELETE, prefix, `${prefix2}${PATH5}`, 'json', 'void', option),
                $path: (option?: { method?: 'get'; query: Methods10['get']['req']['query'] } | { method: 'post'; query: Methods10['post']['req']['query'] } | { method: 'put'; query: Methods10['put']['req']['query'] } | { method: 'delete'; query: Methods10['delete']['req']['query'] }) =>
                  `${prefix}${prefix2}${PATH5}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
              },
              $get: (option: Methods8['get']['req'] & { init?: RequestInit }) =>
                send<{}>(GET, prefix, `${prefix2}${PATH4}`, 'void', 'void', option),
              $post: (option?: Methods8['post']['req'] & { init?: RequestInit }) =>
                send<{}>(POST, prefix, `${prefix2}${PATH4}`, 'void', 'void', option),
              $put: (option?: Methods8['put']['req'] & { init?: RequestInit }) =>
                send<Methods8['put']['res']>(PUT, prefix, `${prefix2}${PATH4}`, 'json', 'void', option),
              $delete: (option: Methods8['delete']['req'] & { init?: RequestInit }) =>
                send<Methods8['delete']['res']>(DELETE, prefix, `${prefix2}${PATH4}`, 'json', 'void', option),
              $path: (option?: { method?: 'get'; query: Methods8['get']['req']['query'] } | { method: 'post'; query: Methods8['post']['req']['query'] } | { method: 'put'; query: Methods8['put']['req']['query'] } | { method: 'delete'; query: Methods8['delete']['req']['query'] }) =>
                `${prefix}${prefix2}${PATH4}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
            }
          }
        },
        _hogeId: (val2: number | string) => {
          const prefix2 = `${PATH2}/${val2}`

          return {
            $get: (option?: { init?: RequestInit }) =>
              send<Methods11['get']['res']>(GET, prefix, prefix2, 'json', 'void', option),
            $path: () => `${prefix}${prefix2}`
          }
        }
      },
      /**
       * 3.1 comment
       */
      $3_1: {
        /**
         * 3.1 get method comment
         * @param option.headers - 3.1 reqHeaders
         */
        $get: (option?: Methods12['get']['req'] & { init?: RequestInit }) =>
          send<Methods12['get']['res']>(GET, prefix, PATH6, 'json', 'void', option),
        $post: (option: Omit<Methods12['post']['req'], 'format'> & { init?: RequestInit }) =>
          send<Methods12['post']['res']>(POST, prefix, PATH6, 'json', 'void', option, URLSEARCHPARAMS),
        $path: (option?: { method?: 'get'; query: Methods12['get']['req']['query'] } | { method: 'post'; query: Methods12['post']['req']['query'] }) =>
          `${prefix}${PATH6}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
      },
      _articleId_json: (val1: number | string) => {
        const prefix1 = `${PATH1}/${val1}.json`

        return {
          $get: (option?: { init?: RequestInit }) =>
            send<Methods13['get']['res']>(GET, prefix, prefix1, 'json', 'void', option),
          $path: () => `${prefix}${prefix1}`
        }
      },
      users: {
        _userId: (val2: string) => {
          const prefix2 = `${PATH7}/${val2}`

          return {
            $get: (option: Methods14['get']['req'] & { init?: RequestInit }) =>
              send<Methods14['get']['res']>(GET, prefix, prefix2, 'json', 'void', option),
            $post: (option: Methods14['post']['req'] & { init?: RequestInit }) =>
              send<Methods14['post']['res']>(POST, prefix, prefix2, 'json', 'void', option),
            $path: (option?: { method?: 'get'; query: Methods14['get']['req']['query'] } | { method: 'post'; query: Methods14['post']['req']['query'] }) =>
              `${prefix}${prefix2}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
          }
        }
      },
      $get: (option?: Methods5['get']['req'] & { init?: RequestInit }) =>
        send<Methods5['get']['res']>(GET, prefix, PATH1, 'json', 'void', option),
      $path: (option?: { method?: 'get'; query: Methods5['get']['req']['query'] }) =>
        `${prefix}${PATH1}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
    },
    v2_0: {
      $get: (option: Methods15['get']['req'] & { init?: RequestInit }) =>
        send<Methods15['get']['res']>(GET, prefix, PATH8, 'text', 'void', option),
      $path: (option?: { method?: 'get'; query: Methods15['get']['req']['query'] }) =>
        `${prefix}${PATH8}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
    },
    /**
     * get method comment
     *
     * @remarks
     * get method remarks comment
     */
    $get: (option?: Methods0['get']['req'] & { init?: RequestInit }) =>
      send<Methods0['get']['res'], Methods0['get']['err']>(GET, prefix, '', 'formData', 'json', option),
    /**
     * @param option.body - body comment
     */
    $post: (option: Methods0['post']['req'] & { init?: RequestInit }) =>
      send<Methods0['post']['res']>(POST, prefix, '', 'arrayBuffer', 'void', option),
    /**
     * put method comment
     * @param option.query - query comment
     * @returns returns comment
     */
    $put: (option: Methods0['put']['req'] & { init?: RequestInit }) =>
      send<Methods0['put']['res']>(PUT, prefix, '', 'json', 'void', option),
    $delete: (option: Methods0['delete']['req'] & { init?: RequestInit }) =>
      send<Methods0['delete']['res']>(DELETE, prefix, '', 'void', 'void', option),
    $path: (option?: { method?: 'get'; query: Methods0['get']['req']['query'] } | { method: 'post'; query: Methods0['post']['req']['query'] } | { method: 'put'; query: Methods0['put']['req']['query'] } | { method: 'delete'; query: Methods0['delete']['req']['query'] }) =>
      `${prefix}${option?.query ? `?${dataToURLString(option.query)}` : ''}`
  } as const
}

// prettier-ignore
export * from './@constants'
